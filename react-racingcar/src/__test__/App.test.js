import { render, fireEvent, queryByAttribute, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import App from '../App';

const getById = queryByAttribute.bind(null, 'id');

describe("üöÄ random ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§", () => {
    test("RandomÏùò pickNumberInRange Î©îÏÜåÎìúÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÎûúÎç§Í∞íÏùÑ ÏÉùÏÑ±Ìï¥ÏïºÌï©ÎãàÎã§.", () => {
        const { container } = render(<App />);
        const randomSpy = jest.spyOn(global.MissionUtils.Random, "pickNumberInRange");
        const $textInput = getById(container, "text-input");
        const $numberInput = getById(container, "number-input");
        const $textButton = getById(container, "text-button");
        const $numberButton = getById(container, "number-button");
        fireEvent.change($textInput, { target: { value: "race1,race2,race3,race4" } });
        userEvent.click($textButton);
        fireEvent.change($numberInput, { target: { value: 2 } });
        userEvent.click($numberButton);
        expect(randomSpy.mock.calls.length).toBeGreaterThanOrEqual(1);
    });
});

describe("‚úÖ input ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§", () => {
    test("#text-inputÏùò ÏûÖÎ†•Í∞íÏóê ÎßûÍ≤å ÏûÖÎ†•Í∞íÏù¥ Î≥ÄÌï¥ÏïºÌï©ÎãàÎã§.", () => {
        const { container } = render(<App />);
        const $textInput = getById(container, "text-input");
        fireEvent.change($textInput, { target: { value: "race1,race2,race3,race4" } });
        const inputValue = screen.getByDisplayValue("race1,race2,race3,race4");
        expect(inputValue.value).toEqual("race1,race2,race3,race4");
    });

    test("#number-inputÏùò ÏûÖÎ†•Í∞íÏóê ÎßûÍ≤å ÏûÖÎ†•Í∞íÏù¥ Î≥ÄÌï¥ÏïºÌï©ÎãàÎã§2.", () => {
        const { container } = render(<App />);
        const $textInput = getById(container, "number-input");
        fireEvent.change($textInput, { target: { value: "10" } });
        const inputValue = screen.getByDisplayValue("10");
        expect(inputValue.value).toEqual("10");
    });

    test("ÏûêÎèôÏ∞®Ïùò Ïù¥Î¶ÑÏùÄ (,)Î°ú Íµ¨Î∂ÑÌïòÎ©∞ Î≤ÑÌäºÏùÑ ÎàÑÎ•∏ Í≤ΩÏö∞ Í∞ÅÍ∞ÅÏùò ÏûêÎèôÏ∞®Ïù¥Î¶ÑÏù¥ 6Í∏ÄÏûê Ïù¥ÏÉÅÏùº Í≤ΩÏö∞ Í≤ΩÍ≥†Ï∞ΩÏúºÎ°ú ÎÇòÌÉÄÎÇ¥Ïïº Ìï©ÎãàÎã§.", () => {
        const alertMock = jest.spyOn(window, "alert");
        const { container } = render(<App />);
        const $input = getById(container, "text-input");
        const $button = getById(container, "text-button");
        fireEvent.change($input, { target: { value: "a,ab,abc,abcd,abcdf" } });
        userEvent.click($button);
        fireEvent.change($input, { target: { value: "a,ab,abc,abcd,abcdfe" } });
        userEvent.click($button);
        expect(alertMock).toBeCalledTimes(1);
    });

    test("Î≤ÑÌäºÏùÑ ÎàÑÎ•º Í≤ΩÏö∞ Ïù¥ÎèôÌïòÎäî ÏûÖÎ†•Í∞íÏù¥ 0Ïù¥ Îì§Ïñ¥Ïò¨ Í≤ΩÏö∞ Í≤ΩÍ≥†Ï∞ΩÏúºÎ°ú ÎÇòÌÉÄÎÇ¥Ïïº Ìï©ÎãàÎã§.", () => {
        const mockAlart = jest.spyOn(window, "alert");
        const { container } = render(<App />);
        const $input = getById(container, "number-input");
        const $button = getById(container, "number-button");
        fireEvent.change($input, { target: { value: '0' } });
        userEvent.click($button);
        expect($input.value).toBe('0');
        expect(mockAlart).toHaveBeenCalledTimes(1);
    });
});

describe("üèé ÏûêÎèôÏ∞® ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§", () => {
    test("ÏûêÎèôÏ∞®Ïùò Í∞úÏàòÏóê ÎßûÍ≤å ÌôîÎ©¥Ïóê ÏûêÎèôÏ∞®Í∞Ä Ï∂úÎ†•ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.", () => {
        const { container } = render(<App />);
        const $textInput = getById(container, "text-input");
        const $numberInput = getById(container, "number-input");
        const $textButton = getById(container, "text-button");
        const $numberButton = getById(container, "number-button");
        fireEvent.change($textInput, { target: { value: "race1,race2,race3,race4" } });
        userEvent.click($textButton);
        fireEvent.change($numberInput, { target: { value: 2 } });
        userEvent.click($numberButton);
        const components = screen.getAllByText(/^race/i);
        expect(components.length).toBe(8);
    });

    test("ÏûêÎèôÏ∞®Ïùò Í∞úÏàòÏôÄ Î∞òÎ≥µ Ïπ¥Ïö¥Ìä∏ÎßåÌÅº pickNumberInRangeÏù¥ Ìò∏Ï∂úÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.", () => {
        const { container } = render(<App />);
        const randomSpy = jest.spyOn(global.MissionUtils.Random, "pickNumberInRange");
        const $textInput = getById(container, "text-input");
        const $numberInput = getById(container, "number-input");
        const $textButton = getById(container, "text-button");
        const $numberButton = getById(container, "number-button");
        fireEvent.change($textInput, { target: { value: "race1,race2,race3,race4" } });
        userEvent.click($textButton);
        fireEvent.change($numberInput, { target: { value: 2 } });
        userEvent.click($numberButton);
        expect(randomSpy).toBeCalledTimes(8);
    });

    test("Ï†ÑÏßÑÌïòÎäî Ï°∞Í±¥ÏùÄ pickNumberInRange Î©îÏÜåÎìúÎ•º ÏÇ¨Ïö©ÌïòÏó¨ 4 Ïù¥ÏÉÅÏù∏ Í≤ΩÏö∞ÏóêÎßå Ï†ÑÏßÑÌï©ÎãàÎã§.", () => {
        const { container } = render(<App />);
        jest.spyOn(global.MissionUtils.Random, "pickNumberInRange")
            .mockReturnValueOnce(4)
            .mockReturnValueOnce(4)
            .mockReturnValueOnce(4)
            .mockReturnValueOnce(4)
            .mockReturnValueOnce(3)
            .mockReturnValueOnce(3)
            .mockReturnValueOnce(5)
            .mockReturnValueOnce(5)
        const $textInput = getById(container, "text-input");
        const $numberInput = getById(container, "number-input");
        const $textButton = getById(container, "text-button");
        const $numberButton = getById(container, "number-button");
        fireEvent.change($textInput, { target: { value: "race1,race2,race3,race4" } });
        userEvent.click($textButton);
        fireEvent.change($numberInput, { target: { value: 2 } });
        userEvent.click($numberButton);
        const firstRaceCar = screen.getAllByText(/^race1/);
        const lastRaceCar = screen.getAllByText(/^race4/);
        expect(firstRaceCar[0]).toHaveTextContent("race1: -");
        expect(firstRaceCar[1]).toHaveTextContent("race1: -");
        expect(lastRaceCar[0]).toHaveTextContent("race4: -");
        expect(lastRaceCar[1]).toHaveTextContent("race4: --");
    });

    test("Í≤åÏûÑÏù¥ Ï¢ÖÎ£åÎêú Îí§Ïóê ÌôîÎ©¥Ïóê ÏµúÏ¢Ö Ïö∞ÏäπÏûêÍ∞Ä Ï∂úÎ†•ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.", () => {
        const { container } = render(<App />);
        const $textInput = getById(container, "text-input");
        const $numberInput = getById(container, "number-input");
        const $textButton = getById(container, "text-button");
        const $numberButton = getById(container, "number-button");
        fireEvent.change($textInput, { target: { value: "race1,race2,race3,race4" } });
        userEvent.click($textButton);
        fireEvent.change($numberInput, { target: { value: 2 } });
        userEvent.click($numberButton);
        const winnerText = screen.getByText(/Ïö∞ÏäπÏûê/);
        expect(winnerText).toBeInTheDocument();
    });
});

describe("üéä ÏäπÎ¶¨ ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§", () => {
    test("Ïö∞ÏäπÏûêÍ∞Ä Ïó¨Îü¨Î™ÖÏùº Í≤ΩÏö∞ ÏâºÌëú(,)Î•º Ïù¥Ïö©ÌïòÏó¨ Íµ¨Î∂ÑÌïòÏó¨ Ï∂úÎ†•ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.", () => {
        const { container } = render(<App />);
        jest.spyOn(global.MissionUtils.Random, "pickNumberInRange")
            .mockReturnValueOnce(4)
            .mockReturnValueOnce(4)
            .mockReturnValueOnce(4)
            .mockReturnValueOnce(4)
            .mockReturnValueOnce(3)
            .mockReturnValueOnce(3)
            .mockReturnValueOnce(5)
            .mockReturnValueOnce(5)
        const $textInput = getById(container, "text-input");
        const $numberInput = getById(container, "number-input");
        const $textButton = getById(container, "text-button");
        const $numberButton = getById(container, "number-button");
        fireEvent.change($textInput, { target: { value: "race1,race2,race3,race4" } });
        userEvent.click($textButton);
        fireEvent.change($numberInput, { target: { value: 2 } });
        userEvent.click($numberButton);
        const winnerText = screen.getByText(/Ïö∞ÏäπÏûê/);
        expect(winnerText).toHaveTextContent(/race3/);
        expect(winnerText).toHaveTextContent(/race4/);
    });
});